<!DOCTYPE html>
<html>
<head>
    <title>Emission Intensity Predictor</title>
    <script src="https://unpkg.com/react@18/umd/react.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
    <div id="root"></div>
    <script type="text/babel">
        // Your React component code goes here
        const EmissionIntensityPredictor = () => {
            const [revenue, setRevenue] = React.useState('');
            const [s3c1Percentage, setS3C1Percentage] = React.useState('');
            const [result, setResult] = React.useState(null);

            const revenueRanges = {
                'Very Small': [0, 5e8],
                'Small': [5e8, 1e9],
                'Medium-Small': [1e9, 5e9],
                'Medium': [5e9, 1e10],
                'Medium-Large': [1e10, 5e10],
                'Large': [5e10, 1e11],
                'Very Large': [1e11, Infinity]
            };

            const s3c1Ranges = {
                'Low': [0, 30],
                'Medium-Low': [30, 50],
                'Medium': [50, 70],
                'Medium-High': [70, 85],
                'High': [85, 100]
            };

            const intensityMatrix = {
                'Medium-Small': {
                    'Medium': 7.18,
                    'Medium-High': 537.12
                },
                'Medium-Large': {
                    'Low': 0.62,
                    'Medium-Low': 92.75,
                    'Medium': 68.67,
                    'Medium-High': 229.05,
                    'High': 106.05
                },
                'Large': {
                    'Medium': 71.52,
                    'High': 220.78
                },
                'Very Large': {
                    'Medium-High': 77.73
                }
            };

            const getCategory = (value, ranges) => {
                for (const [category, [min, max]] of Object.entries(ranges)) {
                    if (value >= min && value < max) return category;
                }
                return null;
            };

            const predictEmissionIntensity = () => {
                const revenueValue = parseFloat(revenue);
                const s3c1Value = parseFloat(s3c1Percentage);
                
                if (isNaN(revenueValue) || isNaN(s3c1Value)) {
                    setResult({ error: 'Please enter valid numbers' });
                    return;
                }

                if (s3c1Value < 0 || s3c1Value > 100) {
                    setResult({ error: 'S3C1 percentage must be between 0 and 100' });
                    return;
                }

                const revenueCat = getCategory(revenueValue, revenueRanges);
                const s3c1Cat = getCategory(s3c1Value, s3c1Ranges);

                let predictedIntensity;
                if (intensityMatrix[revenueCat]?.[s3c1Cat]) {
                    predictedIntensity = intensityMatrix[revenueCat][s3c1Cat];
                } else {
                    const nearestRevCat = Object.keys(intensityMatrix).reduce((prev, curr) => {
                        const [prevMin] = revenueRanges[prev] || [Infinity];
                        const [currMin] = revenueRanges[curr];
                        return Math.abs(currMin - revenueValue) < Math.abs(prevMin - revenueValue) ? curr : prev;
                    });

                    const avgIntensities = Object.values(intensityMatrix[nearestRevCat] || {});
                    predictedIntensity = avgIntensities.length ? 
                        avgIntensities.reduce((a, b) => a + b) / avgIntensities.length :
                        100;
                }

                setResult({
                    revenueCat,
                    s3c1Cat,
                    emissionIntensity: predictedIntensity.toFixed(2),
                    confidence: intensityMatrix[revenueCat]?.[s3c1Cat] ? 'High' : 'Medium'
                });
            };

            return (
                <div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow-lg mt-10">
                    <h2 className="text-2xl font-bold mb-4">Emission Intensity Predictor</h2>
                    <div className="space-y-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Total Revenue ($)</label>
                            <input 
                                type="number"
                                value={revenue}
                                onChange={(e) => setRevenue(e.target.value)}
                                placeholder="Enter total revenue"
                                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">S3C1 Percentage (%)</label>
                            <input 
                                type="number"
                                value={s3c1Percentage}
                                onChange={(e) => setS3C1Percentage(e.target.value)}
                                placeholder="Enter S3C1 percentage"
                                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
                            />
                        </div>
                        <button
                            onClick={predictEmissionIntensity}
                            className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                        >
                            Predict Emission Intensity
                        </button>
                        {result && (
                            <div className="mt-4 p-4 bg-gray-50 rounded-md">
                                {result.error ? (
                                    <p className="text-red-600">{result.error}</p>
                                ) : (
                                    <div className="space-y-2">
                                        <p><strong>Company Size:</strong> {result.revenueCat}</p>
                                        <p><strong>S3C1 Category:</strong> {result.s3c1Cat}</p>
                                        <p><strong>Predicted Emission Intensity:</strong> {result.emissionIntensity} tCO2/M$</p>
                                        <p><strong>Prediction Confidence:</strong> {result.confidence}</p>
                                    </div>
                                )}
                            </div>
                        )}
                    </div>
                </div>
            );
        };

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<EmissionIntensityPredictor />);
    </script>
</body>
</html>