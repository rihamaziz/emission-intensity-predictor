import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';

const EmissionIntensityPredictor = () => {
  const [revenue, setRevenue] = useState('');
  const [s3c1Percentage, setS3C1Percentage] = useState('');
  const [result, setResult] = useState(null);

  const revenueRanges = {
    'Very Small': [0, 5e8],
    'Small': [5e8, 1e9],
    'Medium-Small': [1e9, 5e9],
    'Medium': [5e9, 1e10],
    'Medium-Large': [1e10, 5e10],
    'Large': [5e10, 1e11],
    'Very Large': [1e11, Infinity]
  };

  const s3c1Ranges = {
    'Low': [0, 30],
    'Medium-Low': [30, 50],
    'Medium': [50, 70],
    'Medium-High': [70, 85],
    'High': [85, 100]
  };

  const intensityMatrix = {
    'Medium-Small': {
      'Medium': 7.18,
      'Medium-High': 537.12
    },
    'Medium-Large': {
      'Low': 0.62,
      'Medium-Low': 92.75,
      'Medium': 68.67,
      'Medium-High': 229.05,
      'High': 106.05
    },
    'Large': {
      'Medium': 71.52,
      'High': 220.78
    },
    'Very Large': {
      'Medium-High': 77.73
    }
  };

  const getCategory = (value, ranges) => {
    for (const [category, [min, max]] of Object.entries(ranges)) {
      if (value >= min && value < max) return category;
    }
    return null;
  };

  const predictEmissionIntensity = () => {
    const revenueValue = parseFloat(revenue);
    const s3c1Value = parseFloat(s3c1Percentage);
    
    if (isNaN(revenueValue) || isNaN(s3c1Value)) {
      setResult({ error: 'Please enter valid numbers' });
      return;
    }

    if (s3c1Value < 0 || s3c1Value > 100) {
      setResult({ error: 'S3C1 percentage must be between 0 and 100' });
      return;
    }

    const revenueCat = getCategory(revenueValue, revenueRanges);
    const s3c1Cat = getCategory(s3c1Value, s3c1Ranges);

    let predictedIntensity;
    if (intensityMatrix[revenueCat]?.[s3c1Cat]) {
      predictedIntensity = intensityMatrix[revenueCat][s3c1Cat];
    } else {
      const nearestRevCat = Object.keys(intensityMatrix).reduce((prev, curr) => {
        const [prevMin] = revenueRanges[prev] || [Infinity];
        const [currMin] = revenueRanges[curr];
        return Math.abs(currMin - revenueValue) < Math.abs(prevMin - revenueValue) ? curr : prev;
      });

      const avgIntensities = Object.values(intensityMatrix[nearestRevCat] || {});
      predictedIntensity = avgIntensities.length ? 
        avgIntensities.reduce((a, b) => a + b) / avgIntensities.length :
        100;
    }

    setResult({
      revenueCat,
      s3c1Cat,
      emissionIntensity: predictedIntensity.toFixed(2),
      confidence: intensityMatrix[revenueCat]?.[s3c1Cat] ? 'High' : 'Medium'
    });
  };

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle>Enhanced Emission Intensity Predictor</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div>
            <Label>Total Revenue ($)</Label>
            <Input 
              type="number" 
              value={revenue}
              onChange={(e) => setRevenue(e.target.value)}
              placeholder="Enter total revenue"
              className="mt-1"
            />
          </div>
          <div>
            <Label>S3C1 Percentage (%)</Label>
            <Input 
              type="number" 
              value={s3c1Percentage}
              onChange={(e) => setS3C1Percentage(e.target.value)}
              placeholder="Enter S3C1 percentage"
              className="mt-1"
            />
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex flex-col space-y-4">
        <Button onClick={predictEmissionIntensity} className="w-full">
          Predict Emission Intensity
        </Button>
        {result && (
          <Alert>
            <AlertDescription>
              {result.error ? (
                <p className="text-red-500">{result.error}</p>
              ) : (
                <div className="space-y-2">
                  <p><strong>Company Size:</strong> {result.revenueCat}</p>
                  <p><strong>S3C1 Category:</strong> {result.s3c1Cat}</p>
                  <p><strong>Predicted Emission Intensity:</strong> {result.emissionIntensity} tCO2/M$</p>
                  <p><strong>Prediction Confidence:</strong> {result.confidence}</p>
                </div>
              )}
            </AlertDescription>
          </Alert>
        )}
      </CardFooter>
    </Card>
  );
};

export default EmissionIntensityPredictor;